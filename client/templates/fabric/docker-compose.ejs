# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

volumes:
  orderer.example.com: 
<%_ orgs.forEach((org, index) => { _%> 
  peer0.<%=org.domain%>:
  couchdb<%=index%>:
  ca.<%=org.domain%>:
<%_ }) _%>
  logs:

networks:
  byfn:
services:
<%_ orgs.forEach((org, index) => { _%> 
  ca.<%=org.domain%>:
    image: hyperledger/fabric-ca:1.4.0
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.<%=org.domain%>
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.<%=org.domain%>-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/key.pem
    ports:
      - "<%= index + 7 %>054:7054"
    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.<%=org.domain%>-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/key.pem -b admin:adminpw -d'
    volumes:
      - ./crypto-config/peerOrganizations/<%=org.domain%>/ca/:/etc/hyperledger/fabric-ca-server-config
      - ca.<%=org.domain%>:/etc/hyperledger/fabric-ca-server
    container_name: ${COMPOSE_PROJECT_NAME}_ca.<%=org.domain%>
    networks:
      - byfn 
<%_ }) _%>      
  orderer.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_orderer.example.com
    image: hyperledger/fabric-orderer:1.4.0
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
    - ./config/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
    - ./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
    - ./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
    - orderer.example.com:/var/hyperledger/production/orderer
    ports:
      - 7050:7050
    networks:
      - byfn

<%_ orgs.forEach((org, index) => { _%> 
  peer0.<%=org.domain%>:
    image: hyperledger/fabric-peer:1.4.0
    container_name: ${COMPOSE_PROJECT_NAME}_peer0.<%=org.domain%>
    environment:
      - CORE_PEER_ID=peer0.<%=org.domain%>
      - CORE_PEER_ADDRESS=peer0.<%=org.domain%>:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.<%=org.domain%>:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.<%=org.domain%>:7051
      - CORE_PEER_LOCALMSPID=<%=org.mspid%>
      - CORE_PEER_NETWORKID=${COMPOSE_PROJECT_NAME}
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp/peer
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_byfn
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb<%=index%>:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start     
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/<%=org.domain%>/peers/peer0.<%=org.domain%>/msp:/etc/hyperledger/fabric/msp/peer
      - ./crypto-config/peerOrganizations/<%=org.domain%>/peers/peer0.<%=org.domain%>/tls:/etc/hyperledger/fabric/tls
      - ./crypto-config/peerOrganizations/<%=org.domain%>/users/:/etc/hyperledger/fabric/msp/users
      - ./crypto-config/ordererOrganizations/example.com:/etc/hyperledger/fabric/orderer
      - ./config:/etc/hyperledger/configtx
      - peer0.<%=org.domain%>:/var/hyperledger/production
    ports:
      - <%=index + 7%>051:7051
      - <%=index + 7%>052:7052
      - <%=index + 7%>053:7053  
    depends_on:
      - couchdb<%=index%>
    networks:
      - byfn

  couchdb<%=index%>:
    container_name: ${COMPOSE_PROJECT_NAME}_couchdb<%=index%>
    image: hyperledger/fabric-couchdb:0.4.14
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - <%=index + 5 %>984:5984
    volumes:
      - couchdb<%=index%>:/opt/couchdb/data
    networks:
      - byfn
<%_ }) _%>  

  logs:
    container_name: ${COMPOSE_PROJECT_NAME}_logs
    image: gliderlabs/logspout
    networks:
      - byfn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8000:80
  
